name: Manage GitHub Teams and Members

on:
  workflow_dispatch:
    inputs:
      #checkov:skip=CKV_GHA_7: "dry-run parameter is used safely for testing changes"
      dry-run:
        description: "Perform a dry run without making changes"
        required: false
        type: boolean
        default: false
  push:
    branches:
      - main
    paths:
      - ".github/workflows/team-configs/*.json"

permissions:
  contents: read

jobs:
  manage-teams:
    runs-on: ubuntu-latest

    steps:
      - name: Create App token
        id: create_token
        uses: actions/create-github-app-token@0d564482f06ca65fa9e77e2510873638c82206f2 # v1
        with:
          app-id: ${{ vars.FSDH_TEAM_ADMIN_APP_ID }}
          private-key: ${{ secrets.FSDH_TEAM_ADMIN_APP_KEY }}
          owner: ${{ github.repository_owner }}

      - name: Checkout Repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          fetch-depth: 1

      - name: Set up GitHub CLI and dependencies
        run: |
          gh auth login --with-token <<< "${{ steps.create_token.outputs.token }}"

      - name: Validate Team Configurations
        run: |
          team_configs=(./.github/workflows/team-configs/*.json)

          for team_file in "${team_configs[@]}"; do
            if ! jq empty "$team_file" 2>/dev/null; then
              echo "Invalid JSON in $team_file"
              exit 1
            fi
          done

      - name: Manage Teams
        env:
          DRY_RUN: ${{ inputs.dry-run }}
        run: |
          # Improved function for team property extraction
          get_team_properties() {
            local team_json=$1
            TEAM_NAME=$(echo "$team_json" | jq -r '.name')
            TEAM_SLUG=$(echo "$TEAM_NAME" | tr '[:upper:]' '[:lower:]' | tr ' ' '-')
            TEAM_DESCRIPTION=$(echo "$team_json" | jq -r '.description // ""')
            TEAM_PRIVACY=$(echo "$team_json" | jq -r '.privacy // "closed"')
            TEAM_PERMISSION=$(echo "$team_json" | jq -r '.permission // "push"')
            TEAM_NOTIFICATION=$(echo "$team_json" | jq -r '.notification_setting // "notifications_enabled"')
          }

          # Logging function
          log_action() {
            local action=$1
            local team_name=$2
            echo "[${action^^}] Team: $team_name"
          }

          # Fetch existing teams
          mapfile -t existing_teams < <(gh api orgs/${{ github.repository_owner }}/teams --jq '.[].slug')

          # Process team configurations
          for team_file in ./.github/workflows/team-configs/*.json; do
            [[ -e $team_file ]] || continue

            team=$(cat "$team_file")
            get_team_properties "$team"

            if [[ " ${existing_teams[*]} " =~ ${TEAM_SLUG} ]]; then
              log_action "update" "$TEAM_NAME"
              if [[ "$DRY_RUN" != "true" ]]; then
                gh api \
                  --method PATCH \
                  -H "Accept: application/vnd.github+json" \
                  "/orgs/${{ github.repository_owner }}/teams/${TEAM_SLUG}" \
                  -f "name=${TEAM_NAME}" \
                  -f "description=${TEAM_DESCRIPTION}" \
                  -f "privacy=${TEAM_PRIVACY}" \
                  -f "notification_setting=${TEAM_NOTIFICATION}"
              fi
            else
              log_action "create" "$TEAM_NAME"
              if [[ "$DRY_RUN" != "true" ]]; then
                gh api \
                  --method POST \
                  -H "Accept: application/vnd.github+json" \
                  "/orgs/${{ github.repository_owner }}/teams" \
                  -f "name=${TEAM_NAME}" \
                  -f "description=${TEAM_DESCRIPTION}" \
                  -f "privacy=${TEAM_PRIVACY}" \
                  -f "permission=${TEAM_PERMISSION}" \
                  -f "notification_setting=${TEAM_NOTIFICATION}"
              fi
            fi
          done

          # Remove teams without configurations
          for team_slug in "${existing_teams[@]}"; do
            if ! compgen -G "./.github/workflows/team-configs/${team_slug}.json" > /dev/null; then
              log_action "delete" "$team_slug"
              if [[ "$DRY_RUN" != "true" ]]; then
                gh api \
                  --method DELETE \
                  -H "Accept: application/vnd.github+json" \
                  "/orgs/${{ github.repository_owner }}/teams/${team_slug}"
              fi
            fi
          done

      - name: Manage Team Members
        env:
          DRY_RUN: ${{ inputs.dry-run }}
        run: |
          # Logging function for members
          log_member_action() {
            local action=$1
            local team_name=$2
            local username=$3
            echo "[${action^^}] Team: $team_name, User: $username"
          }

          # Process each team configuration
          for team_file in ./.github/workflows/team-configs/*.json; do
            [[ -e $team_file ]] || continue

            team=$(cat "$team_file")
            TEAM_NAME=$(echo "$team" | jq -r '.name')
            TEAM_SLUG=$(echo "$TEAM_NAME" | tr '[:upper:]' '[:lower:]' | tr ' ' '-')
            TEAM_MEMBERS=$(echo "$team" | jq -c '.members // []')

            # Get current team and organization members
            current_members=$(gh api "orgs/${{ github.repository_owner }}/teams/${TEAM_SLUG}/members" --jq '.[].login')
            current_org_members=$(gh api "/orgs/${{ github.repository_owner }}/members" --jq '.[].login')

            # Add or update members
            echo "$TEAM_MEMBERS" | jq -c '.[]' | while read -r member; do
              username=$(echo "$member" | jq -r '.username')

              # Check if user is an organization member
              if echo "$current_org_members" | grep -qw "$username"; then
                if [[ "$DRY_RUN" != "true" ]]; then

                  log_member_action "add" "$TEAM_NAME" "$username"
                  gh api \
                    --method PUT \
                    -H "Accept: application/vnd.github+json" \
                    "/orgs/${{ github.repository_owner }}/teams/${TEAM_SLUG}/memberships/${username}"
                else
                  log_member_action "would add" "$TEAM_NAME" "$username"
                fi
              else
                echo "User $username is not a member of the organization. Skipping..."
              fi
            done

            # Remove members not in the JSON file or not in the organization
            for member in $current_members; do
              is_org_member=$(echo "$current_org_members" | grep -qw "$member" && echo true || echo false)
              is_member_in_json=$(echo "$TEAM_MEMBERS" | jq -e --arg member "$member" '.[] | select(.username == $member)' > /dev/null && echo true || echo false)

              if [[ "$is_member_in_json" == "false" ]] || [[ "$is_org_member" == "false" ]]; then
                if [[ "$DRY_RUN" != "true" ]]; then
                  log_member_action "remove" "$TEAM_NAME" "$member"
                  gh api \
                    --method DELETE \
                    -H "Accept: application/vnd.github+json" \
                    "/orgs/${{ github.repository_owner }}/teams/${TEAM_SLUG}/memberships/$member"
                else
                  log_member_action "would remove" "$TEAM_NAME" "$member"
                fi
              fi
            done
          done

      - name: Delegate Teams Permissions
        env:
          DRY_RUN: ${{ inputs.dry-run }}
        run: |
          # Function to log actions
          log_repo_action() {
            local action=$1
            local team_name=$2
            local repo_name=$3
            local permission=$4
            echo "[${action^^}] Team: $team_name, Repo: $repo_name, Permission: $permission"
          }

          # Process each team configuration
          for team_file in ./.github/workflows/team-configs/*.json; do
            [[ -e $team_file ]] || continue

            team=$(cat "$team_file")
            TEAM_NAME=$(echo "$team" | jq -r '.name')
            TEAM_SLUG=$(echo "$TEAM_NAME" | tr '[:upper:]' '[:lower:]' | tr ' ' '-')
            REPOSITORIES=$(echo "$team" | jq -c '.repositories // []')

            # Get currently assigned repositories
            current_repos=$(gh api "/orgs/${{ github.repository_owner }}/teams/${TEAM_SLUG}/repos" --jq '.[].full_name')

            # Add or update repository permissions
            echo "$REPOSITORIES" | jq -c '.[]' | while read -r repo; do
              REPO_NAME=$(echo "$repo" | jq -r '.name')
              REPO_PERMISSION=$(echo "$repo" | jq -r '.permissions // "push"')
              FULL_REPO_NAME="${{ github.repository_owner }}/${REPO_NAME}"

              if [[ "$DRY_RUN" != "true" ]]; then
                log_repo_action "add" "$TEAM_NAME" "$REPO_NAME" "$REPO_PERMISSION"
                gh api \
                  --method PUT \
                  -H "Accept: application/vnd.github+json" \
                  "/orgs/${{ github.repository_owner }}/teams/${TEAM_SLUG}/repos/${FULL_REPO_NAME}" \
                  -f "permission=${REPO_PERMISSION}"
              else
                log_repo_action "would add" "$TEAM_NAME" "$REPO_NAME" "$REPO_PERMISSION"
              fi
            done

            # Remove repositories no longer in configuration
            for existing_repo in $current_repos; do
              EXISTING_REPO_NAME=$(basename "$existing_repo")
              if ! echo "$REPOSITORIES" | jq -e --arg repo "$EXISTING_REPO_NAME" '.[] | select(.name == $repo)' > /dev/null; then
                if [[ "$DRY_RUN" != "true" ]]; then
                  log_repo_action "remove" "$TEAM_NAME" "$EXISTING_REPO_NAME" "N/A"
                  gh api \
                    --method DELETE \
                    -H "Accept: application/vnd.github+json" \
                    "/orgs/${{ github.repository_owner }}/teams/${TEAM_SLUG}/repos/${existing_repo}"
                else
                  log_repo_action "would remove" "$TEAM_NAME" "$EXISTING_REPO_NAME" "N/A"
                fi
              fi
            done
          done
